#!/usr/bin/env python3
"""
Demo script showing Hronir AI agent capabilities.
"""

import os
import time

from rich.console import Console
from rich.panel import Panel
from rich.progress import track
from rich.text import Text

console = Console()

def show_intro():
    """Show introduction to the demo."""
    title = Text("🎭 Hronir Encyclopedia AI Agent Demo", style="bold blue")

    intro_text = """
Welcome to the Hronir Encyclopedia AI Agent System!

This demonstration showcases autonomous AI agents that can:
• Generate Borgesian-style hrönir chapters
• Compete with each other for narrative supremacy
• Judge and evaluate competing narratives
• Participate in the literary protocol

The agents use Google Gemini for content generation and follow the 
philosophical and competitive principles of the Hronir Encyclopedia.
"""

    console.print(Panel(intro_text, title="🎭 Hronir AI Agents", border_style="blue"))
    console.print()

def show_agent_capabilities():
    """Show what the agents can do."""

    capabilities = [
        "🖋️  **Chapter Writer Agent**: Creates new hrönir chapters in Borgesian style",
        "⚖️  **Judge Agent**: Evaluates competing narratives and makes decisions",
        "🎯 **Competitive Mode**: Agents compete to create the most compelling content",
        "🔄 **Batch Processing**: Generate multiple chapters efficiently",
        "📊 **Quality Metrics**: Evaluate narrative consistency and literary merit",
        "🧠 **Strategic Thinking**: Adapt writing style based on competitive context"
    ]

    console.print(Panel("\n".join(capabilities), title="🚀 Agent Capabilities", border_style="green"))
    console.print()

def show_working_commands():
    """Show the working CLI commands."""

    working_commands = [
        "✅ `uv run hronir agent status` - Check system status",
        "✅ `uv run hronir agent test-writer` - Test chapter generation",
        "✅ `uv run hronir agent test-writer --theme 'philosophical_maze'` - Themed generation",
        "✅ `uv run hronir agent test-writer --position 1 --predecessor-uuid <uuid>` - Continue narrative",
        "🔧 `uv run hronir agent competitive-session` - Multi-agent competition (in development)",
        "🔧 `uv run hronir agent test-crew` - CrewAI integration (in development)"
    ]

    console.print(Panel("\n".join(working_commands), title="🎮 Available Commands", border_style="yellow"))
    console.print()

def show_example_output():
    """Show example of generated content."""

    example_content = """
**Do Limiar Inominável**

É um equívoco comum, mesmo entre os mais assíduos leitores da Enciclopédia 
Hronir, supor a existência de um *início* tangível. A mente humana, prisioneira 
de uma linearidade inexorável, procura sempre o primeiro degrau da escada 
infinita, o alfa de um alfabeto que não conhece ômega.

Contudo, a Enciclopédia não se inicia; ela *irrompe*. Como uma flor impossível 
que desabrocha simultaneamente em todos os jardins de todos os mundos possíveis, 
cada artigo surge já impregnado da totalidade do conhecimento que ainda não foi 
escrito. O leitor atento perceberá que cada página contém, em estado latente, 
todas as outras páginas...

[Generated by Chapter Writer Agent]
UUID: 9f3d7886-30ac-5cdd-8763-8282b6bce754
Consistency Score: 0.80
Length: 2,314 characters
"""

    console.print(Panel(example_content, title="📖 Example Generated Content", border_style="magenta"))
    console.print()

def show_technical_details():
    """Show technical implementation details."""

    tech_details = """
🔧 **Technical Architecture**:
• Google Gemini API for content generation
• DuckDB for persistent storage
• Pydantic models for data validation
• CrewAI framework for multi-agent coordination
• Rich CLI for interactive demonstrations

🧠 **AI Integration**:
• Prompt engineering for Borgesian style
• Narrative consistency scoring
• Competitive strategy adaptation
• Batch processing capabilities

🎯 **Literary Protocol**:
• Content-addressed UUID system
• Elo ranking for competitive evaluation
• Temporal cascade for canonical path updates
• Game-theoretic agent interactions
"""

    console.print(Panel(tech_details, title="⚙️ Technical Implementation", border_style="cyan"))
    console.print()

def show_next_steps():
    """Show what to do next."""

    next_steps = """
🚀 **Try the System**:
1. Run `uv run hronir agent status` to check system readiness
2. Generate your first chapter with `uv run hronir agent test-writer`
3. Experiment with different themes and positions
4. View the generated content in the Hronir Encyclopedia

🔬 **Experiment Further**:
• Try different themes: 'metaphysical_maze', 'temporal_paradox', 'infinite_library'
• Generate sequential chapters by using predecessor UUIDs
• Compare outputs from different agent configurations
• Explore the competitive dynamics between agents

📚 **Learn More**:
• Read the CLAUDE.md file for development guidelines
• Check the Protocol v2 documentation
• Explore the existing test suite for usage patterns
"""

    console.print(Panel(next_steps, title="🎯 Next Steps", border_style="bright_green"))
    console.print()

def simulate_agent_interaction():
    """Simulate an agent interaction for demo purposes."""

    console.print("🎬 [bold]Simulating Agent Interaction[/bold]")
    console.print()

    # Simulate agent thinking
    steps = [
        "🧠 Agent analyzing narrative context...",
        "📝 Generating Borgesian prose...",
        "🎭 Applying philosophical themes...",
        "⚖️ Evaluating narrative consistency...",
        "✨ Finalizing hrönir chapter..."
    ]

    for step in track(steps, description="Agent Processing"):
        time.sleep(0.5)  # Simulate processing time

    console.print("✅ [bold green]Agent task completed successfully![/bold green]")
    console.print()

def main():
    """Main demo function."""

    # Check if API key is set
    if not os.getenv("GEMINI_API_KEY"):
        console.print(Panel(
            "⚠️ GEMINI_API_KEY not set. Please configure it to run the actual agents:\n\n"
            "export GEMINI_API_KEY='your-api-key-here'",
            title="⚠️ Configuration Required",
            border_style="yellow"
        ))
        console.print()

    show_intro()
    show_agent_capabilities()
    show_working_commands()
    show_example_output()
    show_technical_details()
    simulate_agent_interaction()
    show_next_steps()

    console.print("🎉 [bold]Demo completed![/bold] The Hronir AI Agent System is ready for experimentation.")
    console.print()

if __name__ == "__main__":
    main()
